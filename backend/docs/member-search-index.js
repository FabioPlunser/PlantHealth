memberSearchIndex = [
  {
    p: "at.ac.uibk.plant_health.models.device",
    c: "DeviceType",
    l: "ACCESS_POINT",
  },
  {
    p: "at.ac.uibk.plant_health.models.device",
    c: "AccessPoint",
    l: "AccessPoint(UUID, String, boolean)",
    u: "%3Cinit%3E(java.util.UUID,java.lang.String,boolean)",
  },
  {
    p: "at.ac.uibk.plant_health.models.device",
    c: "AccessPoint",
    l: "AccessPoint(UUID, String, int, boolean)",
    u: "%3Cinit%3E(java.util.UUID,java.lang.String,int,boolean)",
  },
  {
    p: "at.ac.uibk.plant_health.config.jwt_authentication.authentication_types",
    c: "AccessPointAuthentication",
    l: "AccessPointAuthentication()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.models.rest_responses",
    c: "AccessPointConfigResponse",
    l: "AccessPointConfigResponse(AccessPoint)",
    u: "%3Cinit%3E(at.ac.uibk.plant_health.models.device.AccessPoint)",
  },
  {
    p: "at.ac.uibk.plant_health.controllers",
    c: "AccessPointController",
    l: "AccessPointController()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.models.rest_responses",
    c: "AccessPointListResponse",
    l: "AccessPointListResponse(List<AccessPoint>)",
    u: "%3Cinit%3E(java.util.List)",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "AccessPointService",
    l: "AccessPointService()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.config.jwt_authentication",
    c: "JwtTokenAuthenticationProvider",
    l: "additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)",
    u: "additionalAuthenticationChecks(org.springframework.security.core.userdetails.UserDetails,org.springframework.security.authentication.UsernamePasswordAuthenticationToken)",
  },
  {
    p: "at.ac.uibk.plant_health.controllers.dash_board_controller",
    c: "TestDashBoardController",
    l: "addPlantToDashboard()",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "SensorStationPersonReferenceService",
    l: "addPlantToDashboard(Person, SensorStation)",
    u: "addPlantToDashboard(at.ac.uibk.plant_health.models.user.Person,at.ac.uibk.plant_health.models.device.SensorStation)",
  },
  {
    p: "at.ac.uibk.plant_health.controllers",
    c: "DashBoardController",
    l: "addPlantToDashboard(Person, UUID)",
    u: "addPlantToDashboard(at.ac.uibk.plant_health.models.user.Person,java.util.UUID)",
  },
  {
    p: "at.ac.uibk.plant_health.config",
    c: "CustomMvcConfigurer",
    l: "addResourceHandlers(ResourceHandlerRegistry)",
    u: "addResourceHandlers(org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry)",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "SensorStationService",
    l: "addSensorData(SensorStation, List<SensorData>)",
    u: "addSensorData(at.ac.uibk.plant_health.models.device.SensorStation,java.util.List)",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "SensorStationService",
    l: "addSensorData(SensorStation, SensorData)",
    u: "addSensorData(at.ac.uibk.plant_health.models.device.SensorStation,at.ac.uibk.plant_health.models.plant.SensorData)",
  },
  {
    p: "at.ac.uibk.plant_health.models.device",
    c: "SensorStation",
    l: "addSensorStationReference(SensorStationPersonReference)",
    u: "addSensorStationReference(at.ac.uibk.plant_health.models.SensorStationPersonReference)",
  },
  {
    p: "at.ac.uibk.plant_health.models.user",
    c: "Person",
    l: "addSensorStationReference(SensorStationPersonReference)",
    u: "addSensorStationReference(at.ac.uibk.plant_health.models.SensorStationPersonReference)",
  },
  { p: "at.ac.uibk.plant_health.models.user", c: "Permission", l: "ADMIN" },
  {
    p: "at.ac.uibk.plant_health.models.user",
    c: "Permission",
    l: "adminAuthorities()",
  },
  {
    p: "at.ac.uibk.plant_health.models.rest_responses",
    c: "AdminDashBoardResponse",
    l: "AdminDashBoardResponse(List<SensorStation>, List<AccessPoint>, List<Person>, Person)",
    u: "%3Cinit%3E(java.util.List,java.util.List,java.util.List,at.ac.uibk.plant_health.models.user.Person)",
  },
  {
    p: "at.ac.uibk.plant_health.models.user",
    c: "Permission",
    l: "adminPermissions()",
  },
  {
    p: "at.ac.uibk.plant_health.models.rest_responses",
    c: "AdminSensorStationsResponse",
    l: "AdminSensorStationsResponse(List<SensorStation>)",
    u: "%3Cinit%3E(java.util.List)",
  },
  {
    p: "at.ac.uibk.plant_health.models.rest_responses",
    c: "SensorStationBaseResponse.AlarmResponse",
    l: "AlarmResponse(Sensor, SensorStation)",
    u: "%3Cinit%3E(at.ac.uibk.plant_health.models.plant.Sensor,at.ac.uibk.plant_health.models.device.SensorStation)",
  },
  { p: "at.ac.uibk.plant_health.models", c: "Log.LogLevel", l: "ALL" },
  {
    p: "at.ac.uibk.plant_health.models.user",
    c: "Permission",
    l: "allAuthorities()",
  },
  {
    p: "at.ac.uibk.plant_health.models.annotations.aspects",
    c: "AllPermissionAspect",
    l: "AllPermissionAspect()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.models.user",
    c: "Permission",
    l: "allPermissions()",
  },
  {
    p: "at.ac.uibk.plant_health.models.annotations.aspects",
    c: "AnyPermissionAspect",
    l: "AnyPermissionAspect()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.util",
    c: "ArgumentGenerator",
    l: "ArgumentGenerator()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "SensorStationService",
    l: "assignGardenerToSensorStation(SensorStation, UUID, boolean)",
    u: "assignGardenerToSensorStation(at.ac.uibk.plant_health.models.device.SensorStation,java.util.UUID,boolean)",
  },
  {
    p: "at.ac.uibk.plant_health.controllers",
    c: "SensorStationController",
    l: "assignGardenerToSensorStation(UUID, UUID, boolean)",
    u: "assignGardenerToSensorStation(java.util.UUID,java.util.UUID,boolean)",
  },
  {
    p: "at.ac.uibk.plant_health.config.jwt_authentication",
    c: "HeaderTokenAuthenticationFilter",
    l: "attemptAuthentication(HttpServletRequest, HttpServletResponse)",
    u: "attemptAuthentication(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
  },
  {
    p: "at.ac.uibk.plant_health.models.annotations.aspects",
    c: "AuditLogAspect",
    l: "auditLog(ProceedingJoinPoint)",
    u: "auditLog(org.aspectj.lang.ProceedingJoinPoint)",
  },
  {
    p: "at.ac.uibk.plant_health.models.annotations.aspects",
    c: "AuditLogAspect",
    l: "AuditLogAspect()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.config.jwt_authentication",
    c: "AuthContext",
    l: "AuthContext()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.models.user",
    c: "Authenticable",
    l: "Authenticable(String, String)",
    u: "%3Cinit%3E(java.lang.String,java.lang.String)",
  },
  {
    p: "at.ac.uibk.plant_health.models.user",
    c: "Authenticable",
    l: "Authenticable(String, String, Set<GrantedAuthority>)",
    u: "%3Cinit%3E(java.lang.String,java.lang.String,java.util.Set)",
  },
  {
    p: "at.ac.uibk.plant_health.models.user",
    c: "Authenticable",
    l: "Authenticable(String, String, UUID, Set<GrantedAuthority>)",
    u: "%3Cinit%3E(java.lang.String,java.lang.String,java.util.UUID,java.util.Set)",
  },
  {
    p: "at.ac.uibk.plant_health.util",
    c: "EndpointMatcherUtil.ErrorEndpoints",
    l: "AUTHENTICATION_ERROR_ENDPOINT",
  },
  {
    p: "at.ac.uibk.plant_health.config.jwt_authentication",
    c: "AuthenticationFactory",
    l: "AuthenticationFactory()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.util",
    c: "AuthGenerator",
    l: "AuthGenerator()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.config",
    c: "SecurityConfiguration",
    l: "authManager(HttpSecurity)",
    u: "authManager(org.springframework.security.config.annotation.web.builders.HttpSecurity)",
  },
  {
    p: "at.ac.uibk.plant_health.util",
    c: "EndpointMatcherUtil.ErrorEndpoints",
    l: "AUTHORIZATION_ERROR_ENDPOINT",
  },
  {
    p: "at.ac.uibk.plant_health.config",
    c: "DumpConfig",
    l: "base(String, int)",
    u: "base(java.lang.String,int)",
  },
  {
    p: "at.ac.uibk.plant_health.util",
    c: "StringGenerator",
    l: "base(String, int)",
    u: "base(java.lang.String,int)",
  },
  { p: "at.ac.uibk.plant_health.config", c: "OpenApiConfig", l: "BEARER_KEY" },
  {
    p: "at.ac.uibk.plant_health.util",
    c: "SetupH2Console",
    l: "beforeAll(ExtensionContext)",
    u: "beforeAll(org.junit.jupiter.api.extension.ExtensionContext)",
  },
  {
    p: "at.ac.uibk.plant_health.util",
    c: "ArgumentGenerator",
    l: "booleans(int)",
  },
  { p: "at.ac.uibk.plant_health.util", c: "StringGenerator", l: "cardText()" },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "SchedulingService",
    l: "checkAccessPointConnections()",
  },
  { p: "at.ac.uibk.plant_health.util", c: "SetupH2Console", l: "close()" },
  {
    p: "at.ac.uibk.plant_health.config.exception_handling",
    c: "RestAuthenticationEntryPoint",
    l: "commence(HttpServletRequest, HttpServletResponse, AuthenticationException)",
    u: "commence(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.springframework.security.core.AuthenticationException)",
  },
  {
    p: "at.ac.uibk.plant_health.util",
    c: "Constants",
    l: "Constants()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.util",
    c: "ConversionUtil",
    l: "ConversionUtil()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "SensorStationService",
    l: "convertPictureToByteArray(SensorStationPicture)",
    u: "convertPictureToByteArray(at.ac.uibk.plant_health.models.plant.SensorStationPicture)",
  },
  {
    p: "at.ac.uibk.plant_health.util",
    c: "GrantedAuthorityConverter",
    l: "convertToDatabaseColumn(GrantedAuthority)",
    u: "convertToDatabaseColumn(org.springframework.security.core.GrantedAuthority)",
  },
  {
    p: "at.ac.uibk.plant_health.models",
    c: "Log.LogLevelConverter",
    l: "convertToDatabaseColumn(Log.LogLevel)",
    u: "convertToDatabaseColumn(at.ac.uibk.plant_health.models.Log.LogLevel)",
  },
  {
    p: "at.ac.uibk.plant_health.models",
    c: "Log.LogLevelConverter",
    l: "convertToEntityAttribute(String)",
    u: "convertToEntityAttribute(java.lang.String)",
  },
  {
    p: "at.ac.uibk.plant_health.util",
    c: "GrantedAuthorityConverter",
    l: "convertToEntityAttribute(String)",
    u: "convertToEntityAttribute(java.lang.String)",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "PersonService",
    l: "create(Person)",
    u: "create(at.ac.uibk.plant_health.models.user.Person)",
  },
  {
    p: "at.ac.uibk.plant_health.controllers",
    c: "PersonController",
    l: "create(String, String, String, Set<Permission>)",
    u: "create(java.lang.String,java.lang.String,java.lang.String,java.util.Set)",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "AccessPointService",
    l: "create(UUID, String)",
    u: "create(java.util.UUID,java.lang.String)",
  },
  {
    p: "at.ac.uibk.plant_health.config",
    c: "StartupConfig",
    l: "createBaseAdminUser()",
  },
  {
    p: "at.ac.uibk.plant_health.models.rest_responses",
    c: "CreatedUserResponse",
    l: "CreatedUserResponse(Authenticable)",
    u: "%3Cinit%3E(at.ac.uibk.plant_health.models.user.Authenticable)",
  },
  {
    p: "at.ac.uibk.plant_health.models.rest_responses",
    c: "CreatedUserResponse.CreatedUserResponseBuilder",
    l: "CreatedUserResponseBuilder()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.service.person_service",
    c: "TestPersonServiceGeneral",
    l: "createTwoIdenticalUsernames()",
  },
  {
    p: "at.ac.uibk.plant_health.config",
    c: "CustomMvcConfigurer",
    l: "CustomMvcConfigurer()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.config",
    c: "OpenApiConfig",
    l: "customOpenAPI()",
  },
  {
    p: "at.ac.uibk.plant_health.controllers",
    c: "DashBoardController",
    l: "DashBoardController()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.config",
    c: "StartupConfig.Profile",
    l: "DEBUG",
  },
  { p: "at.ac.uibk.plant_health.models", c: "Log.LogLevel", l: "DEBUG" },
  {
    p: "at.ac.uibk.plant_health.util",
    c: "StringGenerator",
    l: "deckDescription()",
  },
  { p: "at.ac.uibk.plant_health.util", c: "StringGenerator", l: "deckName()" },
  {
    p: "at.ac.uibk.plant_health.models.user",
    c: "Permission",
    l: "defaultAuthorities()",
  },
  {
    p: "at.ac.uibk.plant_health.models.user",
    c: "Permission",
    l: "defaultPermissions()",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "PersonService",
    l: "delete(UUID)",
    u: "delete(java.util.UUID)",
  },
  {
    p: "at.ac.uibk.plant_health.controllers",
    c: "AccessPointController",
    l: "deleteAccessPoint(UUID)",
    u: "deleteAccessPoint(java.util.UUID)",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "AccessPointService",
    l: "deleteAccessPoint(UUID)",
    u: "deleteAccessPoint(java.util.UUID)",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "SensorStationService",
    l: "deleteAllPictures(UUID)",
    u: "deleteAllPictures(java.util.UUID)",
  },
  {
    p: "at.ac.uibk.plant_health.controllers",
    c: "SensorStationController",
    l: "deleteAllSensorStationPictures(UUID)",
    u: "deleteAllSensorStationPictures(java.util.UUID)",
  },
  {
    p: "at.ac.uibk.plant_health.repositories",
    c: "SensorStationPersonReferenceRepository",
    l: "deleteByPersonAndSensorStation(Person, SensorStation)",
    u: "deleteByPersonAndSensorStation(at.ac.uibk.plant_health.models.user.Person,at.ac.uibk.plant_health.models.device.SensorStation)",
  },
  {
    p: "at.ac.uibk.plant_health.service.person_service",
    c: "TestPersonServiceGeneral",
    l: "deletePerson()",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "SensorStationService",
    l: "deletePicture(UUID)",
    u: "deletePicture(java.util.UUID)",
  },
  {
    p: "at.ac.uibk.plant_health.controllers",
    c: "SensorStationController",
    l: "deleteSensorStation(UUID)",
    u: "deleteSensorStation(java.util.UUID)",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "SensorStationService",
    l: "deleteSensorStation(UUID)",
    u: "deleteSensorStation(java.util.UUID)",
  },
  {
    p: "at.ac.uibk.plant_health.controllers",
    c: "SensorStationController",
    l: "deleteSensorStationPicture(UUID)",
    u: "deleteSensorStationPicture(java.util.UUID)",
  },
  {
    p: "at.ac.uibk.plant_health.controllers",
    c: "LoginController",
    l: "deleteToken(Person)",
    u: "deleteToken(at.ac.uibk.plant_health.models.user.Person)",
  },
  {
    p: "at.ac.uibk.plant_health.controllers",
    c: "PersonController",
    l: "deleteUser(UUID)",
    u: "deleteUser(java.util.UUID)",
  },
  {
    p: "at.ac.uibk.plant_health.util",
    c: "LocalDateTimeJsonParser",
    l: "describeTo(Description)",
    u: "describeTo(org.hamcrest.Description)",
  },
  {
    p: "at.ac.uibk.plant_health.models.device",
    c: "Device",
    l: "Device()",
    u: "%3Cinit%3E()",
  },
  { p: "at.ac.uibk.plant_health.models.device", c: "Device", l: "deviceId" },
  {
    p: "at.ac.uibk.plant_health.config",
    c: "StartupConfig.Profile",
    l: "DOCKER",
  },
  {
    p: "at.ac.uibk.plant_health.models.annotations.aspects",
    c: "AllPermissionAspect",
    l: "doSomething(ProceedingJoinPoint)",
    u: "doSomething(org.aspectj.lang.ProceedingJoinPoint)",
  },
  {
    p: "at.ac.uibk.plant_health.models.annotations.aspects",
    c: "AnyPermissionAspect",
    l: "doSomething(ProceedingJoinPoint)",
    u: "doSomething(org.aspectj.lang.ProceedingJoinPoint)",
  },
  {
    p: "at.ac.uibk.plant_health.models.annotations.aspects",
    c: "PrincipalRequiredAspect",
    l: "doSomething(ProceedingJoinPoint)",
    u: "doSomething(org.aspectj.lang.ProceedingJoinPoint)",
  },
  {
    p: "at.ac.uibk.plant_health.config",
    c: "DumpConfig",
    l: "DumpConfig()",
    u: "%3Cinit%3E()",
  },
  { p: "at.ac.uibk.plant_health.util", c: "StringGenerator", l: "email()" },
  {
    p: "at.ac.uibk.plant_health.controllers.log_controller",
    c: "TestLogController",
    l: "emptyAuditLog()",
  },
  { p: "at.ac.uibk.plant_health", c: "SwaApplication", l: "encoder()" },
  {
    p: "at.ac.uibk.plant_health.util",
    c: "EndpointMatcherUtil",
    l: "EndpointMatcherUtil()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.models.device",
    c: "AccessPoint",
    l: "equals(Object)",
    u: "equals(java.lang.Object)",
  },
  {
    p: "at.ac.uibk.plant_health.models.device",
    c: "Device",
    l: "equals(Object)",
    u: "equals(java.lang.Object)",
  },
  {
    p: "at.ac.uibk.plant_health.models.device",
    c: "SensorStation",
    l: "equals(Object)",
    u: "equals(java.lang.Object)",
  },
  {
    p: "at.ac.uibk.plant_health.models.plant",
    c: "Sensor",
    l: "equals(Object)",
    u: "equals(java.lang.Object)",
  },
  {
    p: "at.ac.uibk.plant_health.models.plant",
    c: "SensorData",
    l: "equals(Object)",
    u: "equals(java.lang.Object)",
  },
  {
    p: "at.ac.uibk.plant_health.models.plant",
    c: "SensorLimits",
    l: "equals(Object)",
    u: "equals(java.lang.Object)",
  },
  {
    p: "at.ac.uibk.plant_health.models.plant",
    c: "SensorStationPicture",
    l: "equals(Object)",
    u: "equals(java.lang.Object)",
  },
  {
    p: "at.ac.uibk.plant_health.models.user",
    c: "Authenticable",
    l: "equals(Object)",
    u: "equals(java.lang.Object)",
  },
  {
    p: "at.ac.uibk.plant_health.models.user",
    c: "Person",
    l: "equals(Object)",
    u: "equals(java.lang.Object)",
  },
  {
    p: "at.ac.uibk.plant_health.util",
    c: "LocalDateTimeJsonParser",
    l: "equalsWithTolerance(LocalDateTime, TemporalAmount)",
    u: "equalsWithTolerance(java.time.LocalDateTime,java.time.temporal.TemporalAmount)",
  },
  {
    p: "at.ac.uibk.plant_health.models.user",
    c: "Authenticable",
    l: "eraseCredentials()",
  },
  { p: "at.ac.uibk.plant_health.models", c: "Log.LogLevel", l: "ERROR" },
  {
    p: "at.ac.uibk.plant_health.util",
    c: "EndpointMatcherUtil.ErrorEndpoints",
    l: "ERROR_ENDPOINT",
  },
  {
    p: "at.ac.uibk.plant_health.util",
    c: "EndpointMatcherUtil.ErrorEndpoints",
    l: "ErrorEndpoints()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.models.annotations",
    c: "AuditLogAnnotation",
    l: "errorLogLevel()",
  },
  {
    p: "at.ac.uibk.plant_health.models.annotations",
    c: "AuditLogAnnotation",
    l: "errorMessage()",
  },
  { p: "at.ac.uibk.plant_health.models", c: "Log.LogLevel", l: "FATAL" },
  {
    p: "at.ac.uibk.plant_health.config",
    c: "SecurityConfiguration",
    l: "filterChain(HttpSecurity, AuthenticationEntryPoint, RestAccessDeniedHandler)",
    u: "filterChain(org.springframework.security.config.annotation.web.builders.HttpSecurity,org.springframework.security.web.AuthenticationEntryPoint,at.ac.uibk.plant_health.config.exception_handling.RestAccessDeniedHandler)",
  },
  {
    p: "at.ac.uibk.plant_health.repositories",
    c: "AccessPointRepository",
    l: "findAll()",
  },
  {
    p: "at.ac.uibk.plant_health.repositories",
    c: "LogRepository",
    l: "findAll()",
  },
  {
    p: "at.ac.uibk.plant_health.repositories",
    c: "PersonRepository",
    l: "findAll()",
  },
  {
    p: "at.ac.uibk.plant_health.repositories",
    c: "PlantPictureRepository",
    l: "findAll()",
  },
  {
    p: "at.ac.uibk.plant_health.repositories",
    c: "SensorDataRepository",
    l: "findAll()",
  },
  {
    p: "at.ac.uibk.plant_health.repositories",
    c: "SensorLimitsRepository",
    l: "findAll()",
  },
  {
    p: "at.ac.uibk.plant_health.repositories",
    c: "SensorRepository",
    l: "findAll()",
  },
  {
    p: "at.ac.uibk.plant_health.repositories",
    c: "SensorStationPersonReferenceRepository",
    l: "findAll()",
  },
  {
    p: "at.ac.uibk.plant_health.repositories",
    c: "SensorStationRepository",
    l: "findAll()",
  },
  { p: "at.ac.uibk.plant_health.service", c: "LogService", l: "findAll()" },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "SensorStationService",
    l: "findAll()",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "AccessPointService",
    l: "findAllAccessPoints()",
  },
  {
    p: "at.ac.uibk.plant_health.repositories",
    c: "PersonRepository",
    l: "findAllByPermissionsIsContaining(Permission)",
    u: "findAllByPermissionsIsContaining(at.ac.uibk.plant_health.models.user.Permission)",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "SensorStationService",
    l: "findAssociated(Person)",
    u: "findAssociated(at.ac.uibk.plant_health.models.user.Person)",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "LogService",
    l: "findBetween(LocalDateTime, LocalDateTime)",
    u: "findBetween(java.time.LocalDateTime,java.time.LocalDateTime)",
  },
  {
    p: "at.ac.uibk.plant_health.repositories",
    c: "AccessPointRepository",
    l: "findByAccessToken(UUID)",
    u: "findByAccessToken(java.util.UUID)",
  },
  {
    p: "at.ac.uibk.plant_health.repositories",
    c: "SensorStationRepository",
    l: "findByBdAddress(String)",
    u: "findByBdAddress(java.lang.String)",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "SensorStationService",
    l: "findByBdAddress(String)",
    u: "findByBdAddress(java.lang.String)",
  },
  {
    p: "at.ac.uibk.plant_health.repositories",
    c: "AccessPointRepository",
    l: "findByDeviceId(UUID)",
    u: "findByDeviceId(java.util.UUID)",
  },
  {
    p: "at.ac.uibk.plant_health.repositories",
    c: "SensorStationRepository",
    l: "findByGardenerAndSensorStationPersonReferences_PersonAndIsUnlockedTrueAndIsDeletedFalseAndSensorStationPersonReferences_IsAssignedFalseAndSensorStationPersonReferences_InDashboardFalse(Person, Person)",
    u: "findByGardenerAndSensorStationPersonReferences_PersonAndIsUnlockedTrueAndIsDeletedFalseAndSensorStationPersonReferences_IsAssignedFalseAndSensorStationPersonReferences_InDashboardFalse(at.ac.uibk.plant_health.models.user.Person,at.ac.uibk.plant_health.models.user.Person)",
  },
  {
    p: "at.ac.uibk.plant_health.repositories",
    c: "AccessPointRepository",
    l: "findById(UUID)",
    u: "findById(java.util.UUID)",
  },
  {
    p: "at.ac.uibk.plant_health.repositories",
    c: "SensorStationRepository",
    l: "findById(UUID)",
    u: "findById(java.util.UUID)",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "AccessPointService",
    l: "findById(UUID)",
    u: "findById(java.util.UUID)",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "PersonService",
    l: "findById(UUID)",
    u: "findById(java.util.UUID)",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "SensorStationService",
    l: "findById(UUID)",
    u: "findById(java.util.UUID)",
  },
  {
    p: "at.ac.uibk.plant_health.repositories",
    c: "SensorStationRepository",
    l: "findByIsUnlockedAndIsDeleted(boolean, boolean)",
    u: "findByIsUnlockedAndIsDeleted(boolean,boolean)",
  },
  {
    p: "at.ac.uibk.plant_health.repositories",
    c: "SensorStationRepository",
    l: "findByIsUnlockedTrueAndIsDeletedFalseAndSensorStationPersonReferences_PersonAndSensorStationPersonReferences_InDashboardFalse(Person)",
    u: "findByIsUnlockedTrueAndIsDeletedFalseAndSensorStationPersonReferences_PersonAndSensorStationPersonReferences_InDashboardFalse(at.ac.uibk.plant_health.models.user.Person)",
  },
  {
    p: "at.ac.uibk.plant_health.repositories",
    c: "SensorStationPersonReferenceRepository",
    l: "findByPersonAndSensorStation(Person, SensorStation)",
    u: "findByPersonAndSensorStation(at.ac.uibk.plant_health.models.user.Person,at.ac.uibk.plant_health.models.device.SensorStation)",
  },
  {
    p: "at.ac.uibk.plant_health.repositories",
    c: "AccessPointRepository",
    l: "findByRoomName(String)",
    u: "findByRoomName(java.lang.String)",
  },
  {
    p: "at.ac.uibk.plant_health.repositories",
    c: "AccessPointRepository",
    l: "findBySelfAssignedId(UUID)",
    u: "findBySelfAssignedId(java.util.UUID)",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "AccessPointService",
    l: "findBySelfAssignedId(UUID)",
    u: "findBySelfAssignedId(java.util.UUID)",
  },
  {
    p: "at.ac.uibk.plant_health.repositories",
    c: "LogRepository",
    l: "findByTimeStampBetween(LocalDateTime, LocalDateTime)",
    u: "findByTimeStampBetween(java.time.LocalDateTime,java.time.LocalDateTime)",
  },
  {
    p: "at.ac.uibk.plant_health.repositories",
    c: "SensorRepository",
    l: "findByType(String)",
    u: "findByType(java.lang.String)",
  },
  {
    p: "at.ac.uibk.plant_health.repositories",
    c: "PersonRepository",
    l: "findByUsername(String)",
    u: "findByUsername(java.lang.String)",
  },
  {
    p: "at.ac.uibk.plant_health.repositories",
    c: "PersonRepository",
    l: "findByUsernameAndToken(String, UUID)",
    u: "findByUsernameAndToken(java.lang.String,java.util.UUID)",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "PersonService",
    l: "findByUsernameAndToken(String, UUID)",
    u: "findByUsernameAndToken(java.lang.String,java.util.UUID)",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "PersonService",
    l: "findByUsernameAndToken(UserAuthentication)",
    u: "findByUsernameAndToken(at.ac.uibk.plant_health.config.jwt_authentication.authentication_types.UserAuthentication)",
  },
  {
    p: "at.ac.uibk.plant_health.repositories",
    c: "PlantPictureRepository",
    l: "findDistinctFirstBySensorStationOrderByTimeStampDesc(SensorStation)",
    u: "findDistinctFirstBySensorStationOrderByTimeStampDesc(at.ac.uibk.plant_health.models.device.SensorStation)",
  },
  {
    p: "at.ac.uibk.plant_health.repositories",
    c: "SensorStationRepository",
    l: "findNewForGardener(Person)",
    u: "findNewForGardener(at.ac.uibk.plant_health.models.user.Person)",
  },
  {
    p: "at.ac.uibk.plant_health.repositories",
    c: "SensorStationRepository",
    l: "findNewForUser(Person)",
    u: "findNewForUser(at.ac.uibk.plant_health.models.user.Person)",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "AccessPointService",
    l: "foundNewSensorStation(AccessPoint, List<SensorStation>)",
    u: "foundNewSensorStation(at.ac.uibk.plant_health.models.device.AccessPoint,java.util.List)",
  },
  {
    p: "at.ac.uibk.plant_health.controllers",
    c: "AccessPointController",
    l: "foundSensorStations(AccessPoint, List<SensorStation>)",
    u: "foundSensorStations(at.ac.uibk.plant_health.models.device.AccessPoint,java.util.List)",
  },
  {
    p: "at.ac.uibk.plant_health.models.user",
    c: "Permission",
    l: "fromAuthorities(Set<GrantedAuthority>)",
    u: "fromAuthorities(java.util.Set)",
  },
  {
    p: "at.ac.uibk.plant_health.config",
    c: "StartupConfig.Profile",
    l: "fromString(String)",
    u: "fromString(java.lang.String)",
  },
  { p: "at.ac.uibk.plant_health.models.user", c: "Permission", l: "GARDENER" },
  {
    p: "at.ac.uibk.plant_health.models.user",
    c: "Permission",
    l: "gardenerAuthorities()",
  },
  {
    p: "at.ac.uibk.plant_health.models.rest_responses",
    c: "GardenerDashBoardResponse",
    l: "GardenerDashBoardResponse(List<SensorStation>, Person)",
    u: "%3Cinit%3E(java.util.List,at.ac.uibk.plant_health.models.user.Person)",
  },
  {
    p: "at.ac.uibk.plant_health.util",
    c: "AuthGenerator",
    l: "generateJwtToken(Person)",
    u: "generateJwtToken(at.ac.uibk.plant_health.models.user.Person)",
  },
  {
    p: "at.ac.uibk.plant_health.util",
    c: "AuthGenerator",
    l: "generateToken(Person)",
    u: "generateToken(at.ac.uibk.plant_health.models.user.Person)",
  },
  {
    p: "at.ac.uibk.plant_health.util",
    c: "AuthGenerator",
    l: "generateToken(String, UUID)",
    u: "generateToken(java.lang.String,java.util.UUID)",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "AccessPointService",
    l: "getAccessPointAccessToken(UUID)",
    u: "getAccessPointAccessToken(java.util.UUID)",
  },
  {
    p: "at.ac.uibk.plant_health.controllers",
    c: "AccessPointController",
    l: "getAccessPointConfig(AccessPoint)",
    u: "getAccessPointConfig(at.ac.uibk.plant_health.models.device.AccessPoint)",
  },
  {
    p: "at.ac.uibk.plant_health.controllers",
    c: "AccessPointController",
    l: "getAccessPoints()",
  },
  {
    p: "at.ac.uibk.plant_health.controllers.access_point_controller",
    c: "TestAccessPointController",
    l: "getAccessPointSensorStations()",
  },
  {
    p: "at.ac.uibk.plant_health.controllers",
    c: "AccessPointController",
    l: "getAccessPointSensorStations(UUID)",
    u: "getAccessPointSensorStations(java.util.UUID)",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "AccessPointService",
    l: "getAccessPointSensorStations(UUID)",
    u: "getAccessPointSensorStations(java.util.UUID)",
  },
  {
    p: "at.ac.uibk.plant_health.config",
    c: "StartupConfig",
    l: "getActiveProfile()",
  },
  {
    p: "at.ac.uibk.plant_health.controllers",
    c: "PersonController",
    l: "getAllGardener()",
  },
  {
    p: "at.ac.uibk.plant_health.controllers",
    c: "PersonController",
    l: "getAllPermissions()",
  },
  {
    p: "at.ac.uibk.plant_health.controllers",
    c: "SensorStationController",
    l: "getAllSensorStations()",
  },
  {
    p: "at.ac.uibk.plant_health.controllers",
    c: "PersonController",
    l: "getAllUsers(Person)",
    u: "getAllUsers(at.ac.uibk.plant_health.models.user.Person)",
  },
  {
    p: "at.ac.uibk.plant_health.config.jwt_authentication",
    c: "AuthContext",
    l: "getAuthentication()",
  },
  {
    p: "at.ac.uibk.plant_health.config.jwt_authentication",
    c: "AuthenticationFactory",
    l: "getAuthentication(String, String)",
    u: "getAuthentication(java.lang.String,java.lang.String)",
  },
  {
    p: "at.ac.uibk.plant_health.models.device",
    c: "AccessPoint",
    l: "getAuthorities()",
  },
  {
    p: "at.ac.uibk.plant_health.models.device",
    c: "SensorStation",
    l: "getAuthorities()",
  },
  {
    p: "at.ac.uibk.plant_health.models.user",
    c: "Authenticable",
    l: "getAuthorities()",
  },
  {
    p: "at.ac.uibk.plant_health.models.device",
    c: "DeviceType",
    l: "getAuthority()",
  },
  {
    p: "at.ac.uibk.plant_health.models.user",
    c: "Permission",
    l: "getAuthority()",
  },
  {
    p: "at.ac.uibk.plant_health.controllers",
    c: "DashBoardController",
    l: "getDashboard(Person)",
    u: "getDashboard(at.ac.uibk.plant_health.models.user.Person)",
  },
  {
    p: "at.ac.uibk.plant_health.controllers.dash_board_controller",
    c: "TestDashBoardController",
    l: "getDataFromDashboard()",
  },
  {
    p: "at.ac.uibk.plant_health.models.device",
    c: "AccessPoint",
    l: "getDeviceId()",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "PersonService",
    l: "getGardener()",
  },
  {
    p: "at.ac.uibk.plant_health.config.jwt_authentication",
    c: "AuthContext",
    l: "getIdentifiedPrincipal()",
  },
  {
    p: "at.ac.uibk.plant_health.controllers",
    c: "LogController",
    l: "getLogs()",
  },
  {
    p: "at.ac.uibk.plant_health.controllers",
    c: "LogController",
    l: "getLogs(LocalDateTime, LocalDateTime)",
    u: "getLogs(java.time.LocalDateTime,java.time.LocalDateTime)",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "SensorStationService",
    l: "getNewestPicture(UUID)",
    u: "getNewestPicture(java.util.UUID)",
  },
  {
    p: "at.ac.uibk.plant_health.controllers",
    c: "SensorStationController",
    l: "getNewestSensorStationPicture(UUID)",
    u: "getNewestSensorStationPicture(java.util.UUID)",
  },
  {
    p: "at.ac.uibk.plant_health.models.device",
    c: "Device",
    l: "getPassword()",
  },
  {
    p: "at.ac.uibk.plant_health.models.user",
    c: "Authenticable",
    l: "getPassword()",
  },
  {
    p: "at.ac.uibk.plant_health.models",
    c: "SensorStationPersonReference",
    l: "getPerson()",
  },
  {
    p: "at.ac.uibk.plant_health.service.person_service",
    c: "TestPersonServiceGeneral",
    l: "getPersonById()",
  },
  {
    p: "at.ac.uibk.plant_health.service.person_service",
    c: "TestPersonServiceSecurity",
    l: "getPersonByToken()",
  },
  { p: "at.ac.uibk.plant_health.models.user", c: "Person", l: "getPersonId()" },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "PersonService",
    l: "getPersons()",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "SensorStationService",
    l: "getPicture(UUID)",
    u: "getPicture(java.util.UUID)",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "SensorStationService",
    l: "getPictureName(UUID)",
    u: "getPictureName(java.util.UUID)",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "SensorStationService",
    l: "getPictures(UUID)",
    u: "getPictures(java.util.UUID)",
  },
  {
    p: "at.ac.uibk.plant_health.controllers.dash_board_controller",
    c: "TestDashBoardController",
    l: "getPlantsOnDashboard()",
  },
  {
    p: "at.ac.uibk.plant_health.config.jwt_authentication",
    c: "AuthContext",
    l: "getPrincipal()",
  },
  {
    p: "at.ac.uibk.plant_health.models.device",
    c: "AccessPoint",
    l: "getScanActive()",
  },
  {
    p: "at.ac.uibk.plant_health.controllers",
    c: "SensorStationController",
    l: "getSensorStation(Person, UUID)",
    u: "getSensorStation(at.ac.uibk.plant_health.models.user.Person,java.util.UUID)",
  },
  {
    p: "at.ac.uibk.plant_health.controllers",
    c: "SensorStationController",
    l: "getSensorStationData(Person, UUID, LocalDateTime, LocalDateTime)",
    u: "getSensorStationData(at.ac.uibk.plant_health.models.user.Person,java.util.UUID,java.time.LocalDateTime,java.time.LocalDateTime)",
  },
  {
    p: "at.ac.uibk.plant_health.controllers",
    c: "SensorStationController",
    l: "getSensorStationInfo(UUID)",
    u: "getSensorStationInfo(java.util.UUID)",
  },
  {
    p: "at.ac.uibk.plant_health.controllers",
    c: "SensorStationController",
    l: "getSensorStationPicture(UUID)",
    u: "getSensorStationPicture(java.util.UUID)",
  },
  {
    p: "at.ac.uibk.plant_health.controllers",
    c: "SensorStationController",
    l: "getSensorStationPictures(UUID)",
    u: "getSensorStationPictures(java.util.UUID)",
  },
  {
    p: "at.ac.uibk.plant_health.controllers",
    c: "SensorStationController",
    l: "getSensorStations(Person)",
    u: "getSensorStations(at.ac.uibk.plant_health.models.user.Person)",
  },
  {
    p: "at.ac.uibk.plant_health.util",
    c: "ReflectionUtil",
    l: "getStaticFieldValue(Field)",
    u: "getStaticFieldValue(java.lang.reflect.Field)",
  },
  {
    p: "at.ac.uibk.plant_health.util",
    c: "ReflectionUtil",
    l: "getStaticFieldValueTyped(Field)",
    u: "getStaticFieldValueTyped(java.lang.reflect.Field)",
  },
  {
    p: "at.ac.uibk.plant_health.models.device",
    c: "Device",
    l: "getStringIdentification()",
  },
  {
    p: "at.ac.uibk.plant_health.models",
    c: "IdentifiedEntity",
    l: "getStringIdentification()",
  },
  {
    p: "at.ac.uibk.plant_health.models.user",
    c: "Authenticable",
    l: "getStringIdentification()",
  },
  {
    p: "at.ac.uibk.plant_health.config.jwt_authentication",
    c: "AuthContext",
    l: "getToken()",
  },
  {
    p: "at.ac.uibk.plant_health.config.jwt_authentication",
    c: "RequestInfo",
    l: "getToken()",
  },
  {
    p: "at.ac.uibk.plant_health.controllers",
    c: "LoginController",
    l: "getToken(String, String)",
    u: "getToken(java.lang.String,java.lang.String)",
  },
  {
    p: "at.ac.uibk.plant_health.config.jwt_authentication",
    c: "RequestInfo",
    l: "getUserAgent()",
  },
  {
    p: "at.ac.uibk.plant_health.models.device",
    c: "AccessPoint",
    l: "getUsername()",
  },
  {
    p: "at.ac.uibk.plant_health.models.device",
    c: "Device",
    l: "getUsername()",
  },
  {
    p: "at.ac.uibk.plant_health.models.user",
    c: "Authenticable",
    l: "getUsername()",
  },
  {
    p: "at.ac.uibk.plant_health.controllers",
    c: "PersonController",
    l: "getUserPermissions(Person)",
    u: "getUserPermissions(at.ac.uibk.plant_health.models.user.Person)",
  },
  {
    p: "at.ac.uibk.plant_health.util",
    c: "GrantedAuthorityConverter",
    l: "GrantedAuthorityConverter()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.config.exception_handling",
    c: "RestAccessDeniedHandler",
    l: "handle(HttpServletRequest, HttpServletResponse, AccessDeniedException)",
    u: "handle(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.springframework.security.access.AccessDeniedException)",
  },
  {
    p: "at.ac.uibk.plant_health.controllers.error_controllers",
    c: "SwaExceptionHandlerController",
    l: "handleAccessDeniedException(HttpServletRequest, HttpServletResponse, AccessDeniedException)",
    u: "handleAccessDeniedException(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.springframework.security.access.AccessDeniedException)",
  },
  {
    p: "at.ac.uibk.plant_health.controllers.error_controllers",
    c: "SwaErrorController",
    l: "handleAuthenticationError(HttpServletRequest, HttpServletResponse, AuthenticationException)",
    u: "handleAuthenticationError(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.springframework.security.core.AuthenticationException)",
  },
  {
    p: "at.ac.uibk.plant_health.controllers.error_controllers",
    c: "SwaExceptionHandlerController",
    l: "handleAuthenticationException(HttpServletRequest, HttpServletResponse, AuthenticationException)",
    u: "handleAuthenticationException(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.springframework.security.core.AuthenticationException)",
  },
  {
    p: "at.ac.uibk.plant_health.controllers.error_controllers",
    c: "SwaErrorController",
    l: "handleAuthorizationError(HttpServletRequest, HttpServletResponse, AccessDeniedException)",
    u: "handleAuthorizationError(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.springframework.security.access.AccessDeniedException)",
  },
  {
    p: "at.ac.uibk.plant_health.controllers.error_controllers",
    c: "SwaErrorController",
    l: "handleError(HttpServletRequest, HttpServletResponse, Exception)",
    u: "handleError(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,java.lang.Exception)",
  },
  {
    p: "at.ac.uibk.plant_health.controllers.error_controllers",
    c: "SwaErrorController",
    l: "handleErrorManual(HttpServletRequest, HttpServletResponse, Exception)",
    u: "handleErrorManual(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,java.lang.Exception)",
  },
  {
    p: "at.ac.uibk.plant_health.controllers.error_controllers",
    c: "SwaExceptionHandlerController",
    l: "handleException(HttpServletRequest, HttpServletResponse, Exception)",
    u: "handleException(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,java.lang.Exception)",
  },
  {
    p: "at.ac.uibk.plant_health.controllers.error_controllers",
    c: "SwaErrorController",
    l: "handleNotFoundError(HttpServletRequest, HttpServletResponse)",
    u: "handleNotFoundError(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse)",
  },
  {
    p: "at.ac.uibk.plant_health.controllers.error_controllers",
    c: "SwaErrorController",
    l: "handleTokenExpiredError(HttpServletRequest, HttpServletResponse, TokenExpiredException)",
    u: "handleTokenExpiredError(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,at.ac.uibk.plant_health.models.exceptions.TokenExpiredException)",
  },
  {
    p: "at.ac.uibk.plant_health.controllers.error_controllers",
    c: "SwaExceptionHandlerController",
    l: "handleTokenExpiredException(HttpServletRequest, HttpServletResponse, TokenExpiredException)",
    u: "handleTokenExpiredException(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,at.ac.uibk.plant_health.models.exceptions.TokenExpiredException)",
  },
  {
    p: "at.ac.uibk.plant_health.models.device",
    c: "AccessPoint",
    l: "hashCode()",
  },
  { p: "at.ac.uibk.plant_health.models.device", c: "Device", l: "hashCode()" },
  {
    p: "at.ac.uibk.plant_health.models.device",
    c: "SensorStation",
    l: "hashCode()",
  },
  { p: "at.ac.uibk.plant_health.models.plant", c: "Sensor", l: "hashCode()" },
  {
    p: "at.ac.uibk.plant_health.models.plant",
    c: "SensorData",
    l: "hashCode()",
  },
  {
    p: "at.ac.uibk.plant_health.models.plant",
    c: "SensorLimits",
    l: "hashCode()",
  },
  {
    p: "at.ac.uibk.plant_health.models.plant",
    c: "SensorStationPicture",
    l: "hashCode()",
  },
  {
    p: "at.ac.uibk.plant_health.models.user",
    c: "Authenticable",
    l: "hashCode()",
  },
  { p: "at.ac.uibk.plant_health.models.user", c: "Person", l: "hashCode()" },
  {
    p: "at.ac.uibk.plant_health.models.user",
    c: "Authenticable",
    l: "hashPassword(PasswordEncoder)",
    u: "hashPassword(org.springframework.security.crypto.password.PasswordEncoder)",
  },
  {
    p: "at.ac.uibk.plant_health.config.jwt_authentication",
    c: "HeaderTokenAuthenticationFilter",
    l: "HeaderTokenAuthenticationFilter(RequestMatcher)",
    u: "%3Cinit%3E(org.springframework.security.web.util.matcher.RequestMatcher)",
  },
  { p: "at.ac.uibk.plant_health.models", c: "Log.LogLevel", l: "INFO" },
  {
    p: "at.ac.uibk.plant_health.util",
    c: "Constants",
    l: "INJECTION_ASPECT_ORDER",
  },
  {
    p: "at.ac.uibk.plant_health.models.rest_responses",
    c: "MessageResponse.MessageResponseBuilder",
    l: "internalError()",
  },
  {
    p: "at.ac.uibk.plant_health.models.rest_responses",
    c: "RestResponse.RestResponseBuilder",
    l: "internalError()",
  },
  {
    p: "at.ac.uibk.plant_health.models.rest_responses",
    c: "MessageResponse.MessageResponseBuilder",
    l: "internalError(Exception)",
    u: "internalError(java.lang.Exception)",
  },
  {
    p: "at.ac.uibk.plant_health.models.device",
    c: "Device",
    l: "isAccountNonExpired()",
  },
  {
    p: "at.ac.uibk.plant_health.models.user",
    c: "Authenticable",
    l: "isAccountNonExpired()",
  },
  {
    p: "at.ac.uibk.plant_health.models.device",
    c: "Device",
    l: "isAccountNonLocked()",
  },
  {
    p: "at.ac.uibk.plant_health.models.user",
    c: "Authenticable",
    l: "isAccountNonLocked()",
  },
  {
    p: "at.ac.uibk.plant_health.util",
    c: "ReflectionUtil",
    l: "isAssignableFrom(Field, Class<?>)",
    u: "isAssignableFrom(java.lang.reflect.Field,java.lang.Class)",
  },
  {
    p: "at.ac.uibk.plant_health.util",
    c: "ReflectionUtil",
    l: "isAssignableFromPredicate(Class<?>)",
    u: "isAssignableFromPredicate(java.lang.Class)",
  },
  {
    p: "at.ac.uibk.plant_health.models.device",
    c: "Device",
    l: "isCredentialsNonExpired()",
  },
  {
    p: "at.ac.uibk.plant_health.models.user",
    c: "Authenticable",
    l: "isCredentialsNonExpired()",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "SensorStationService",
    l: "isDeleted(SensorStation)",
    u: "isDeleted(at.ac.uibk.plant_health.models.device.SensorStation)",
  },
  { p: "at.ac.uibk.plant_health.models.device", c: "Device", l: "isEnabled()" },
  {
    p: "at.ac.uibk.plant_health.models.user",
    c: "Authenticable",
    l: "isEnabled()",
  },
  {
    p: "at.ac.uibk.plant_health.util",
    c: "ReflectionUtil",
    l: "isStaticField(Field)",
    u: "isStaticField(java.lang.reflect.Field)",
  },
  {
    p: "at.ac.uibk.plant_health.config",
    c: "StartupConfig.Profile",
    l: "isUnknown()",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "AccessPointService",
    l: "isUnlockedByDeviceId(UUID)",
    u: "isUnlockedByDeviceId(java.util.UUID)",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "AccessPointService",
    l: "isUnlockedBySelfAssignedId(UUID)",
    u: "isUnlockedBySelfAssignedId(java.util.UUID)",
  },
  {
    p: "at.ac.uibk.plant_health.config.jwt_authentication",
    c: "JwtTokenAuthenticationProvider",
    l: "JwtTokenAuthenticationProvider()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.models.rest_responses",
    c: "AccessPointConfigResponse.SensorStationInfo.SensorInfo.Limits",
    l: "Limits(double, double)",
    u: "%3Cinit%3E(double,double)",
  },
  {
    p: "at.ac.uibk.plant_health.models.rest_responses",
    c: "ListResponse",
    l: "ListResponse(List<T>)",
    u: "%3Cinit%3E(java.util.List)",
  },
  {
    p: "at.ac.uibk.plant_health.config",
    c: "DumpConfig",
    l: "loadDatabaseDump()",
  },
  {
    p: "at.ac.uibk.plant_health.util",
    c: "LocalDateTimeJsonParser",
    l: "LocalDateTimeJsonParser(LocalDateTime, LocalDateTime)",
    u: "%3Cinit%3E(java.time.LocalDateTime,java.time.LocalDateTime)",
  },
  {
    p: "at.ac.uibk.plant_health.util",
    c: "LocalDateTimeJsonParser",
    l: "LocalDateTimeJsonParser(LocalDateTime, TemporalAmount)",
    u: "%3Cinit%3E(java.time.LocalDateTime,java.time.temporal.TemporalAmount)",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "LogService",
    l: "log(Log)",
    u: "log(at.ac.uibk.plant_health.models.Log)",
  },
  {
    p: "at.ac.uibk.plant_health.models",
    c: "Log",
    l: "Log(Log.LogLevel, String)",
    u: "%3Cinit%3E(at.ac.uibk.plant_health.models.Log.LogLevel,java.lang.String)",
  },
  {
    p: "at.ac.uibk.plant_health.models",
    c: "Log",
    l: "Log(Log.LogLevel, String, String, String)",
    u: "%3Cinit%3E(at.ac.uibk.plant_health.models.Log.LogLevel,java.lang.String,java.lang.String,java.lang.String)",
  },
  {
    p: "at.ac.uibk.plant_health.config",
    c: "StartupConfig",
    l: "logActiveProfile()",
  },
  {
    p: "at.ac.uibk.plant_health.controllers",
    c: "LogController",
    l: "LogController()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.util",
    c: "Constants",
    l: "LOGGING_ASPECT_ORDER",
  },
  {
    p: "at.ac.uibk.plant_health.util",
    c: "EndpointMatcherUtil",
    l: "LOGIN_ENDPOINT",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "PersonService",
    l: "login(String, String)",
    u: "login(java.lang.String,java.lang.String)",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "LoginService",
    l: "login(TokenAuthentication)",
    u: "login(at.ac.uibk.plant_health.config.jwt_authentication.authentication_types.TokenAuthentication)",
  },
  {
    p: "at.ac.uibk.plant_health.controllers",
    c: "LoginController",
    l: "LoginController()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.controllers",
    c: "LoginController",
    l: "loginPost(String, String)",
    u: "loginPost(java.lang.String,java.lang.String)",
  },
  {
    p: "at.ac.uibk.plant_health.models.rest_responses",
    c: "LoginResponse",
    l: "LoginResponse(Authenticable)",
    u: "%3Cinit%3E(at.ac.uibk.plant_health.models.user.Authenticable)",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "LoginService",
    l: "LoginService()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.service.person_service",
    c: "TestPersonServiceSecurity",
    l: "loginWithInvalidCredentials()",
  },
  {
    p: "at.ac.uibk.plant_health.service.person_service",
    c: "TestPersonServiceSecurity",
    l: "loginWithValidCredentials()",
  },
  {
    p: "at.ac.uibk.plant_health.models",
    c: "Log.LogLevelConverter",
    l: "LogLevelConverter()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.util",
    c: "EndpointMatcherUtil",
    l: "LOGOUT_ENDPOINT",
  },
  {
    p: "at.ac.uibk.plant_health.service.person_service",
    c: "TestPersonServiceSecurity",
    l: "logout()",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "PersonService",
    l: "logout(Person)",
    u: "logout(at.ac.uibk.plant_health.models.user.Person)",
  },
  {
    p: "at.ac.uibk.plant_health.service.person_service",
    c: "TestPersonServiceSecurity",
    l: "logoutWithToken()",
  },
  {
    p: "at.ac.uibk.plant_health.models.rest_responses",
    c: "LogResponse",
    l: "LogResponse(List<Log>)",
    u: "%3Cinit%3E(java.util.List)",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "LogService",
    l: "LogService()",
    u: "%3Cinit%3E()",
  },
  { p: "at.ac.uibk.plant_health.config", c: "DumpConfig", l: "macAddress()" },
  {
    p: "at.ac.uibk.plant_health.util",
    c: "StringGenerator",
    l: "macAddress()",
  },
  {
    p: "at.ac.uibk.plant_health",
    c: "SwaApplication",
    l: "main(String[])",
    u: "main(java.lang.String[])",
  },
  {
    p: "at.ac.uibk.plant_health.util",
    c: "LocalDateTimeJsonParser",
    l: "matches(Object)",
    u: "matches(java.lang.Object)",
  },
  {
    p: "at.ac.uibk.plant_health.models.rest_responses",
    c: "MessageResponse",
    l: "message",
  },
  {
    p: "at.ac.uibk.plant_health.models.rest_responses",
    c: "MessageResponse",
    l: "MessageResponse(int, String)",
    u: "%3Cinit%3E(int,java.lang.String)",
  },
  {
    p: "at.ac.uibk.plant_health.models.rest_responses",
    c: "MessageResponse.MessageResponseBuilder",
    l: "MessageResponseBuilder()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.util",
    c: "MockAuthContext",
    l: "MockAuthContext()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.util",
    c: "EndpointMatcherUtil.ErrorEndpoints",
    l: "NOT_FOUND_ERROR_ENDPOINT",
  },
  {
    p: "at.ac.uibk.plant_health.models.rest_responses",
    c: "RestResponse.RestResponseBuilder",
    l: "notFound()",
  },
  { p: "at.ac.uibk.plant_health.models", c: "Log.LogLevel", l: "OFF" },
  {
    p: "at.ac.uibk.plant_health.models.rest_responses",
    c: "RestResponse.RestResponseBuilder",
    l: "ok()",
  },
  {
    p: "at.ac.uibk.plant_health.config.exception_handling",
    c: "RestAuthenticationFailureHandler",
    l: "onAuthenticationFailure(HttpServletRequest, HttpServletResponse, AuthenticationException)",
    u: "onAuthenticationFailure(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,org.springframework.security.core.AuthenticationException)",
  },
  {
    p: "at.ac.uibk.plant_health.config",
    c: "OpenApiConfig",
    l: "OpenApiConfig()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.config",
    c: "StartupConfig.Profile",
    l: "OTHER",
  },
  { p: "at.ac.uibk.plant_health.util", c: "StringGenerator", l: "password()" },
  {
    p: "at.ac.uibk.plant_health.util",
    c: "Constants",
    l: "PERMISSION_CHECKING_ASPECT_ORDER",
  },
  {
    p: "at.ac.uibk.plant_health.models.rest_responses",
    c: "PermissionResponse",
    l: "PermissionResponse(GrantedAuthority[])",
    u: "%3Cinit%3E(org.springframework.security.core.GrantedAuthority[])",
  },
  {
    p: "at.ac.uibk.plant_health.models.rest_responses",
    c: "CreatedUserResponse.CreatedUserResponseBuilder",
    l: "person(Person)",
    u: "person(at.ac.uibk.plant_health.models.user.Person)",
  },
  {
    p: "at.ac.uibk.plant_health.models.user",
    c: "Person",
    l: "Person(String, String, String)",
    u: "%3Cinit%3E(java.lang.String,java.lang.String,java.lang.String)",
  },
  {
    p: "at.ac.uibk.plant_health.models.user",
    c: "Person",
    l: "Person(String, String, String, Set<GrantedAuthority>)",
    u: "%3Cinit%3E(java.lang.String,java.lang.String,java.lang.String,java.util.Set)",
  },
  {
    p: "at.ac.uibk.plant_health.models.user",
    c: "Person",
    l: "Person(String, String, String, UUID, Set<GrantedAuthority>)",
    u: "%3Cinit%3E(java.lang.String,java.lang.String,java.lang.String,java.util.UUID,java.util.Set)",
  },
  {
    p: "at.ac.uibk.plant_health.controllers",
    c: "PersonController",
    l: "PersonController()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "PersonService",
    l: "PersonService()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.models.rest_responses",
    c: "PlantListResponse",
    l: "PlantListResponse(List<SensorStation>)",
    u: "%3Cinit%3E(java.util.List)",
  },
  {
    p: "at.ac.uibk.plant_health.models.rest_responses",
    c: "PlantPicturesResponse",
    l: "PlantPicturesResponse(List<SensorStationPicture>, SensorStation)",
    u: "%3Cinit%3E(java.util.List,at.ac.uibk.plant_health.models.device.SensorStation)",
  },
  {
    p: "at.ac.uibk.plant_health.models.annotations.aspects",
    c: "PrincipalRequiredAspect",
    l: "PrincipalRequiredAspect()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.config",
    c: "StartupConfig.Profile",
    l: "PROD",
  },
  {
    p: "at.ac.uibk.plant_health.models.rest_responses",
    c: "RedirectResponse",
    l: "RedirectResponse(String)",
    u: "%3Cinit%3E(java.lang.String)",
  },
  {
    p: "at.ac.uibk.plant_health.models.rest_responses",
    c: "RedirectResponse.RedirectResponseBuilder",
    l: "RedirectResponseBuilder()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.util",
    c: "ReflectionUtil",
    l: "ReflectionUtil()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.util",
    c: "EndpointMatcherUtil",
    l: "REGISTER_ENDPOINT",
  },
  {
    p: "at.ac.uibk.plant_health.controllers",
    c: "PersonController",
    l: "register(String, String, String)",
    u: "register(java.lang.String,java.lang.String,java.lang.String)",
  },
  {
    p: "at.ac.uibk.plant_health.controllers",
    c: "AccessPointController",
    l: "register(UUID, String)",
    u: "register(java.util.UUID,java.lang.String)",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "AccessPointService",
    l: "register(UUID, String)",
    u: "register(java.util.UUID,java.lang.String)",
  },
  {
    p: "at.ac.uibk.plant_health.controllers",
    c: "DashBoardController",
    l: "removeFromDashboard(Person, UUID)",
    u: "removeFromDashboard(at.ac.uibk.plant_health.models.user.Person,java.util.UUID)",
  },
  {
    p: "at.ac.uibk.plant_health.controllers.dash_board_controller",
    c: "TestDashBoardController",
    l: "removePlantFromDashboard()",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "SensorStationPersonReferenceService",
    l: "removePlantFromDashboard(Person, SensorStation)",
    u: "removePlantFromDashboard(at.ac.uibk.plant_health.models.user.Person,at.ac.uibk.plant_health.models.device.SensorStation)",
  },
  {
    p: "at.ac.uibk.plant_health.config.jwt_authentication",
    c: "RequestInfo",
    l: "RequestInfo(String, TokenAuthentication)",
    u: "%3Cinit%3E(java.lang.String,at.ac.uibk.plant_health.config.jwt_authentication.authentication_types.TokenAuthentication)",
  },
  {
    p: "at.ac.uibk.plant_health.config.exception_handling",
    c: "RestAccessDeniedHandler",
    l: "RestAccessDeniedHandler()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.config.exception_handling",
    c: "RestAuthenticationEntryPoint",
    l: "RestAuthenticationEntryPoint()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.config.exception_handling",
    c: "RestAuthenticationFailureHandler",
    l: "RestAuthenticationFailureHandler()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.models.rest_responses",
    c: "RestResponse",
    l: "RestResponse(HttpStatus)",
    u: "%3Cinit%3E(org.springframework.http.HttpStatus)",
  },
  {
    p: "at.ac.uibk.plant_health.models.rest_responses",
    c: "RestResponse",
    l: "RestResponse(int)",
    u: "%3Cinit%3E(int)",
  },
  {
    p: "at.ac.uibk.plant_health.models.rest_responses",
    c: "RestResponse.RestResponseBuilder",
    l: "RestResponseBuilder()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.models.rest_responses",
    c: "RestResponseEntity",
    l: "RestResponseEntity(RestResponse)",
    u: "%3Cinit%3E(at.ac.uibk.plant_health.models.rest_responses.RestResponse)",
  },
  {
    p: "at.ac.uibk.plant_health.models.rest_responses",
    c: "RestResponseEntity",
    l: "RestResponseEntity(RestResponse, MultiValueMap<String, String>)",
    u: "%3Cinit%3E(at.ac.uibk.plant_health.models.rest_responses.RestResponse,org.springframework.util.MultiValueMap)",
  },
  {
    p: "at.ac.uibk.plant_health.config.jwt_authentication",
    c: "JwtTokenAuthenticationProvider",
    l: "retrieveUser(String, UsernamePasswordAuthenticationToken)",
    u: "retrieveUser(java.lang.String,org.springframework.security.authentication.UsernamePasswordAuthenticationToken)",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "AccessPointService",
    l: "save(AccessPoint)",
    u: "save(at.ac.uibk.plant_health.models.device.AccessPoint)",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "PersonService",
    l: "save(Person)",
    u: "save(at.ac.uibk.plant_health.models.user.Person)",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "SensorStationService",
    l: "save(SensorStation)",
    u: "save(at.ac.uibk.plant_health.models.device.SensorStation)",
  },
  {
    p: "at.ac.uibk.plant_health.service.person_service",
    c: "TestPersonServiceGeneral",
    l: "saveAndGetPersons()",
  },
  {
    p: "at.ac.uibk.plant_health.controllers",
    c: "AccessPointController",
    l: "scanForSensorStations(UUID, boolean)",
    u: "scanForSensorStations(java.util.UUID,boolean)",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "SchedulingService",
    l: "SchedulingService()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.config",
    c: "SecurityConfiguration",
    l: "SecurityConfiguration()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.models.device",
    c: "DeviceType",
    l: "SENSOR_STATION",
  },
  {
    p: "at.ac.uibk.plant_health.models.plant",
    c: "Sensor",
    l: "Sensor(String, String)",
    u: "%3Cinit%3E(java.lang.String,java.lang.String)",
  },
  {
    p: "at.ac.uibk.plant_health.models.plant",
    c: "SensorData",
    l: "SensorData(LocalDateTime, float, String, Sensor, SensorStation)",
    u: "%3Cinit%3E(java.time.LocalDateTime,float,java.lang.String,at.ac.uibk.plant_health.models.plant.Sensor,at.ac.uibk.plant_health.models.device.SensorStation)",
  },
  {
    p: "at.ac.uibk.plant_health.models.rest_responses",
    c: "AccessPointConfigResponse.SensorStationInfo.SensorInfo",
    l: "SensorInfo(SensorLimits)",
    u: "%3Cinit%3E(at.ac.uibk.plant_health.models.plant.SensorLimits)",
  },
  {
    p: "at.ac.uibk.plant_health.models.plant",
    c: "SensorLimits",
    l: "SensorLimits(LocalDateTime, float, float, int, Sensor, Person, SensorStation)",
    u: "%3Cinit%3E(java.time.LocalDateTime,float,float,int,at.ac.uibk.plant_health.models.plant.Sensor,at.ac.uibk.plant_health.models.user.Person,at.ac.uibk.plant_health.models.device.SensorStation)",
  },
  {
    p: "at.ac.uibk.plant_health.models.device",
    c: "SensorStation",
    l: "SensorStation(String, int)",
    u: "%3Cinit%3E(java.lang.String,int)",
  },
  {
    p: "at.ac.uibk.plant_health.config.jwt_authentication.authentication_types",
    c: "SensorStationAuthentication",
    l: "SensorStationAuthentication()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.models.rest_responses",
    c: "SensorStationBaseResponse",
    l: "SensorStationBaseResponse(SensorStation)",
    u: "%3Cinit%3E(at.ac.uibk.plant_health.models.device.SensorStation)",
  },
  {
    p: "at.ac.uibk.plant_health.controllers",
    c: "SensorStationController",
    l: "SensorStationController()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.models.rest_responses",
    c: "SensorStationDataResponse",
    l: "SensorStationDataResponse(SensorStation, LocalDateTime, LocalDateTime)",
    u: "%3Cinit%3E(at.ac.uibk.plant_health.models.device.SensorStation,java.time.LocalDateTime,java.time.LocalDateTime)",
  },
  {
    p: "at.ac.uibk.plant_health.models.rest_responses",
    c: "SensorStationDetailResponse",
    l: "SensorStationDetailResponse(SensorStation, Person)",
    u: "%3Cinit%3E(at.ac.uibk.plant_health.models.device.SensorStation,at.ac.uibk.plant_health.models.user.Person)",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "SensorStationService",
    l: "sensorStationExists(String)",
    u: "sensorStationExists(java.lang.String)",
  },
  {
    p: "at.ac.uibk.plant_health.models.rest_responses",
    c: "AccessPointConfigResponse.SensorStationInfo",
    l: "SensorStationInfo(SensorStation)",
    u: "%3Cinit%3E(at.ac.uibk.plant_health.models.device.SensorStation)",
  },
  {
    p: "at.ac.uibk.plant_health.models.rest_responses",
    c: "SensorStationDetailResponse.SensorStationInnerResponse",
    l: "SensorStationInnerResponse(SensorStation, Person)",
    u: "%3Cinit%3E(at.ac.uibk.plant_health.models.device.SensorStation,at.ac.uibk.plant_health.models.user.Person)",
  },
  {
    p: "at.ac.uibk.plant_health.models",
    c: "SensorStationPersonReference",
    l: "SensorStationPersonReference(SensorStation, Person, boolean, boolean)",
    u: "%3Cinit%3E(at.ac.uibk.plant_health.models.device.SensorStation,at.ac.uibk.plant_health.models.user.Person,boolean,boolean)",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "SensorStationPersonReferenceService",
    l: "SensorStationPersonReferenceService()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.models.plant",
    c: "SensorStationPicture",
    l: "SensorStationPicture(SensorStation, String, LocalDateTime)",
    u: "%3Cinit%3E(at.ac.uibk.plant_health.models.device.SensorStation,java.lang.String,java.time.LocalDateTime)",
  },
  {
    p: "at.ac.uibk.plant_health.models.rest_responses",
    c: "SensorStationPublicInfo",
    l: "SensorStationPublicInfo(SensorStation)",
    u: "%3Cinit%3E(at.ac.uibk.plant_health.models.device.SensorStation)",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "SensorStationService",
    l: "SensorStationService()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.models.rest_responses",
    c: "SensorStationsResponse",
    l: "SensorStationsResponse(List<SensorStation>, Person)",
    u: "%3Cinit%3E(java.util.List,at.ac.uibk.plant_health.models.user.Person)",
  },
  {
    p: "at.ac.uibk.plant_health.util",
    c: "SerializationUtil",
    l: "SerializationUtil()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.util",
    c: "SerializationUtil",
    l: "serializeJSON(Object)",
    u: "serializeJSON(java.lang.Object)",
  },
  {
    p: "at.ac.uibk.plant_health.models.exceptions",
    c: "ServiceException",
    l: "ServiceException(String, int)",
    u: "%3Cinit%3E(java.lang.String,int)",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "AccessPointService",
    l: "setAccessPointSensorStationsReported(List<AccessPoint>)",
    u: "setAccessPointSensorStationsReported(java.util.List)",
  },
  {
    p: "at.ac.uibk.plant_health.models.plant",
    c: "SensorData",
    l: "setAlarm(String)",
    u: "setAlarm(java.lang.String)",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "AccessPointService",
    l: "setLastConnection(AccessPoint)",
    u: "setLastConnection(at.ac.uibk.plant_health.models.device.AccessPoint)",
  },
  {
    p: "at.ac.uibk.plant_health.controllers",
    c: "AccessPointController",
    l: "setLockAccessPoint(UUID, boolean)",
    u: "setLockAccessPoint(java.util.UUID,boolean)",
  },
  {
    p: "at.ac.uibk.plant_health.controllers",
    c: "SensorStationController",
    l: "setLockSensorStation(UUID, boolean)",
    u: "setLockSensorStation(java.util.UUID,boolean)",
  },
  {
    p: "at.ac.uibk.plant_health.util",
    c: "MockAuthContext",
    l: "setLoggedInUser(Authenticable)",
    u: "setLoggedInUser(at.ac.uibk.plant_health.models.user.Authenticable)",
  },
  {
    p: "at.ac.uibk.plant_health.models.user",
    c: "Authenticable",
    l: "setPassword(String)",
    u: "setPassword(java.lang.String)",
  },
  {
    p: "at.ac.uibk.plant_health.models.user",
    c: "Authenticable",
    l: "setPermissions(Set<Permission>)",
    u: "setPermissions(java.util.Set)",
  },
  {
    p: "at.ac.uibk.plant_health.models",
    c: "SensorStationPersonReference",
    l: "setPerson(Person)",
    u: "setPerson(at.ac.uibk.plant_health.models.user.Person)",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "AccessPointService",
    l: "setScan(UUID, boolean)",
    u: "setScan(java.util.UUID,boolean)",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "SensorStationService",
    l: "setSensorLimits(List<SensorLimits>, SensorStation, Person)",
    u: "setSensorLimits(java.util.List,at.ac.uibk.plant_health.models.device.SensorStation,at.ac.uibk.plant_health.models.user.Person)",
  },
  {
    p: "at.ac.uibk.plant_health.controllers",
    c: "SensorStationController",
    l: "setSensorLimits(Person, UUID, String, Integer, List<SensorLimits>)",
    u: "setSensorLimits(at.ac.uibk.plant_health.models.user.Person,java.util.UUID,java.lang.String,java.lang.Integer,java.util.List)",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "AccessPointService",
    l: "setSensorStationData(List<SensorStation>, AccessPoint)",
    u: "setSensorStationData(java.util.List,at.ac.uibk.plant_health.models.device.AccessPoint)",
  },
  {
    p: "at.ac.uibk.plant_health.models.user",
    c: "Authenticable",
    l: "setToken(UUID)",
    u: "setToken(java.util.UUID)",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "AccessPointService",
    l: "setUnlocked(boolean, UUID)",
    u: "setUnlocked(boolean,java.util.UUID)",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "SensorStationService",
    l: "setUnlocked(boolean, UUID)",
    u: "setUnlocked(boolean,java.util.UUID)",
  },
  {
    p: "at.ac.uibk.plant_health.controllers.log_controller",
    c: "TestLogController",
    l: "setup()",
  },
  {
    p: "at.ac.uibk.plant_health.util",
    c: "SetupH2Console",
    l: "SetupH2Console()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.controllers.log_controller",
    c: "TestLogController",
    l: "singleLog()",
  },
  {
    p: "at.ac.uibk.plant_health.controllers.log_controller",
    c: "TestLogController",
    l: "singleLogWithCaller()",
  },
  {
    p: "at.ac.uibk.plant_health.models.annotations.aspects",
    c: "AuditLogAspect",
    l: "skipFirst(Iterable<T>)",
    u: "skipFirst(java.lang.Iterable)",
  },
  {
    p: "at.ac.uibk.plant_health.config",
    c: "StartupConfig",
    l: "StartupConfig()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.models.rest_responses",
    c: "RedirectResponse.RedirectResponseBuilder",
    l: "statusCode(HttpStatus)",
    u: "statusCode(org.springframework.http.HttpStatus)",
  },
  {
    p: "at.ac.uibk.plant_health.models.rest_responses",
    c: "RestResponse.RestResponseBuilder",
    l: "statusCode(HttpStatus)",
    u: "statusCode(org.springframework.http.HttpStatus)",
  },
  {
    p: "at.ac.uibk.plant_health.models.rest_responses",
    c: "RedirectResponse.RedirectResponseBuilder",
    l: "statusCode(HttpStatusCode)",
    u: "statusCode(org.springframework.http.HttpStatusCode)",
  },
  {
    p: "at.ac.uibk.plant_health.models.rest_responses",
    c: "RestResponse.RestResponseBuilder",
    l: "statusCode(HttpStatusCode)",
    u: "statusCode(org.springframework.http.HttpStatusCode)",
  },
  {
    p: "at.ac.uibk.plant_health.models.rest_responses",
    c: "RedirectResponse.RedirectResponseBuilder",
    l: "statusCode(int)",
  },
  {
    p: "at.ac.uibk.plant_health.models.rest_responses",
    c: "RestResponse.RestResponseBuilder",
    l: "statusCode(int)",
  },
  {
    p: "at.ac.uibk.plant_health.util",
    c: "StringGenerator",
    l: "StringGenerator()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.config.jwt_authentication",
    c: "HeaderTokenAuthenticationFilter",
    l: "successfulAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, Authentication)",
    u: "successfulAuthentication(jakarta.servlet.http.HttpServletRequest,jakarta.servlet.http.HttpServletResponse,jakarta.servlet.FilterChain,org.springframework.security.core.Authentication)",
  },
  {
    p: "at.ac.uibk.plant_health.models.annotations",
    c: "AuditLogAnnotation",
    l: "successLogLevel()",
  },
  {
    p: "at.ac.uibk.plant_health.models.annotations",
    c: "AuditLogAnnotation",
    l: "successMessage()",
  },
  {
    p: "at.ac.uibk.plant_health",
    c: "SwaApplication",
    l: "SwaApplication()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.controllers.error_controllers",
    c: "SwaErrorController",
    l: "SwaErrorController()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.controllers.error_controllers",
    c: "SwaExceptionHandlerController",
    l: "SwaExceptionHandlerController()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.config",
    c: "StartupConfig.Profile",
    l: "TEST",
  },
  {
    p: "at.ac.uibk.plant_health.config.controller",
    c: "TestController",
    l: "TEST_PERMISSION_ADMIN",
  },
  {
    p: "at.ac.uibk.plant_health.config.controller",
    c: "TestController",
    l: "TEST_PERMISSION_ANONYMOUS",
  },
  {
    p: "at.ac.uibk.plant_health.config.controller",
    c: "TestController",
    l: "TEST_PERMISSION_API",
  },
  {
    p: "at.ac.uibk.plant_health.config.controller",
    c: "TestController",
    l: "TEST_PRINCIPLE_ACCESS_POINT",
  },
  {
    p: "at.ac.uibk.plant_health.config.controller",
    c: "TestController",
    l: "TEST_PRINCIPLE_AUTHENTICABLE",
  },
  {
    p: "at.ac.uibk.plant_health.config.controller",
    c: "TestController",
    l: "TEST_PRINCIPLE_SENSOR_STATION",
  },
  {
    p: "at.ac.uibk.plant_health.config",
    c: "TestRouteAuthentication",
    l: "test()",
  },
  {
    p: "at.ac.uibk.plant_health.config.controller",
    c: "TestController",
    l: "testAccessPoint()",
  },
  {
    p: "at.ac.uibk.plant_health.controllers.access_point_controller",
    c: "TestAccessPointController",
    l: "TestAccessPointController()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.models",
    c: "TestAccessPointModel",
    l: "TestAccessPointModel()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.config.controller",
    c: "TestController",
    l: "testAdmin()",
  },
  {
    p: "at.ac.uibk.plant_health.config",
    c: "TestRouteAuthentication",
    l: "testAdminAccessingAdminRoute()",
  },
  {
    p: "at.ac.uibk.plant_health.config",
    c: "TestRouteAuthentication",
    l: "testAdminAccessingAnonymousRoute()",
  },
  {
    p: "at.ac.uibk.plant_health.config",
    c: "TestRouteAuthentication",
    l: "testAdminAccessingApiRoute()",
  },
  {
    p: "at.ac.uibk.plant_health.config",
    c: "TestRouteAuthentication",
    l: "testAnonymousAccessingAdminRouteWithCredentials()",
  },
  {
    p: "at.ac.uibk.plant_health.config",
    c: "TestRouteAuthentication",
    l: "testAnonymousAccessingAdminRouteWithOutCredentials()",
  },
  {
    p: "at.ac.uibk.plant_health.config",
    c: "TestRouteAuthentication",
    l: "testAnonymousAccessingAnonymousRouteWithCredentials()",
  },
  {
    p: "at.ac.uibk.plant_health.config",
    c: "TestRouteAuthentication",
    l: "testAnonymousAccessingAnonymousRouteWithOutCredentials()",
  },
  {
    p: "at.ac.uibk.plant_health.config",
    c: "TestRouteAuthentication",
    l: "testAnonymousAccessingApiRouteWithCredentials()",
  },
  {
    p: "at.ac.uibk.plant_health.config",
    c: "TestRouteAuthentication",
    l: "testAnonymousAccessingApiRouteWithOutCredentials()",
  },
  {
    p: "at.ac.uibk.plant_health.config.controller",
    c: "TestController",
    l: "testAPI()",
  },
  {
    p: "at.ac.uibk.plant_health.config.controller",
    c: "TestController",
    l: "testAPIAdmin()",
  },
  {
    p: "at.ac.uibk.plant_health.config.controller",
    c: "TestController",
    l: "testAuthenticable()",
  },
  {
    p: "at.ac.uibk.plant_health.config.controller",
    c: "TestController",
    l: "TestController()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.controllers.dash_board_controller",
    c: "TestDashBoardController",
    l: "TestDashBoardController()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.controllers.access_point_controller",
    c: "TestAccessPointController",
    l: "testDeleteAccessPointWithInvalidId()",
  },
  {
    p: "at.ac.uibk.plant_health.config",
    c: "TestRouteAuthentication",
    l: "testExpiredToken()",
  },
  {
    p: "at.ac.uibk.plant_health.controllers.log_controller",
    c: "TestLogController",
    l: "TestLogController()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.config",
    c: "TestRouteAuthentication",
    l: "testNotExpiredToken()",
  },
  {
    p: "at.ac.uibk.plant_health.service.person_service",
    c: "TestPersonServiceSecurity",
    l: "testPasswordHashingWithNullUpdate()",
  },
  {
    p: "at.ac.uibk.plant_health.service.person_service",
    c: "TestPersonServiceSecurity",
    l: "testPasswordHashingWithUpdate()",
  },
  {
    p: "at.ac.uibk.plant_health.repositories",
    c: "TestPersonRepository",
    l: "TestPersonRepository()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.service.person_service",
    c: "TestPersonServiceGeneral",
    l: "TestPersonServiceGeneral()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.service.person_service",
    c: "TestPersonServiceSecurity",
    l: "TestPersonServiceSecurity()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.config",
    c: "TestRouteAuthentication",
    l: "TestRouteAuthentication()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.controllers.access_point_controller",
    c: "TestAccessPointController",
    l: "testScanForSensorStationsWithInvalidId()",
  },
  {
    p: "at.ac.uibk.plant_health.models",
    c: "TestSensorDataModel",
    l: "TestSensorDataModel()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.config.controller",
    c: "TestController",
    l: "testSensorStation()",
  },
  {
    p: "at.ac.uibk.plant_health.controllers.sensor_station_controller",
    c: "TestSensorStationController",
    l: "TestSensorStationController()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.models",
    c: "TestSensorStationModel",
    l: "TestSensorStationModel()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.controllers.access_point_controller",
    c: "TestAccessPointController",
    l: "testSetAccessPointTransferIntervalWithInvalidId()",
  },
  {
    p: "at.ac.uibk.plant_health.controllers.access_point_controller",
    c: "TestAccessPointController",
    l: "testSetUnlockedAccessPointWithInvalidId()",
  },
  {
    p: "at.ac.uibk.plant_health.controllers.access_point_controller",
    c: "TestAccessPointController",
    l: "testTransferDataWithLockedSensorStation()",
  },
  {
    p: "at.ac.uibk.plant_health.controllers.access_point_controller",
    c: "TestAccessPointController",
    l: "testTransferDataWithoutSensorStation()",
  },
  {
    p: "at.ac.uibk.plant_health.controllers.access_point_controller",
    c: "TestAccessPointController",
    l: "testUpdateAccessPointWithInvalidId()",
  },
  {
    p: "at.ac.uibk.plant_health.repositories",
    c: "TestPersonRepository",
    l: "testUpdateToken()",
  },
  {
    p: "at.ac.uibk.plant_health.config",
    c: "TestRouteAuthentication",
    l: "testUserAccessingAdminRoute()",
  },
  {
    p: "at.ac.uibk.plant_health.config",
    c: "TestRouteAuthentication",
    l: "testUserAccessingAnonymousRoute()",
  },
  {
    p: "at.ac.uibk.plant_health.config",
    c: "TestRouteAuthentication",
    l: "testUserAccessingApiRoute()",
  },
  {
    p: "at.ac.uibk.plant_health.util",
    c: "EndpointMatcherUtil",
    l: "toAdminEndpoint(String)",
    u: "toAdminEndpoint(java.lang.String)",
  },
  {
    p: "at.ac.uibk.plant_health.util",
    c: "EndpointMatcherUtil",
    l: "toApiEndpoint(String)",
    u: "toApiEndpoint(java.lang.String)",
  },
  {
    p: "at.ac.uibk.plant_health.models.rest_responses",
    c: "RedirectResponse",
    l: "toEntity()",
  },
  {
    p: "at.ac.uibk.plant_health.models.rest_responses",
    c: "RestResponse.RestResponseBuilder",
    l: "toEntity()",
  },
  {
    p: "at.ac.uibk.plant_health.models.rest_responses",
    c: "RestResponse",
    l: "toEntity()",
  },
  {
    p: "at.ac.uibk.plant_health.util",
    c: "EndpointMatcherUtil.ErrorEndpoints",
    l: "TOKEN_EXPIRED_ERROR_ENDPOINT",
  },
  {
    p: "at.ac.uibk.plant_health.config.jwt_authentication.authentication_types",
    c: "TokenAuthentication",
    l: "TokenAuthentication()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.models.exceptions",
    c: "TokenExpiredException",
    l: "TokenExpiredException()",
    u: "%3Cinit%3E()",
  },
  {
    p: "at.ac.uibk.plant_health.models.exceptions",
    c: "TokenExpiredException",
    l: "TokenExpiredException(String)",
    u: "%3Cinit%3E(java.lang.String)",
  },
  {
    p: "at.ac.uibk.plant_health.models.exceptions",
    c: "TokenExpiredException",
    l: "TokenExpiredException(String, Throwable)",
    u: "%3Cinit%3E(java.lang.String,java.lang.Throwable)",
  },
  {
    p: "at.ac.uibk.plant_health.models.rest_responses",
    c: "TokenResponse",
    l: "TokenResponse(UUID)",
    u: "%3Cinit%3E(java.util.UUID)",
  },
  {
    p: "at.ac.uibk.plant_health.models.rest_responses",
    c: "RestResponse",
    l: "toResponse()",
  },
  {
    p: "at.ac.uibk.plant_health.models.device",
    c: "AccessPoint",
    l: "toString()",
  },
  {
    p: "at.ac.uibk.plant_health.models.device",
    c: "SensorStation",
    l: "toString()",
  },
  { p: "at.ac.uibk.plant_health.models.plant", c: "Sensor", l: "toString()" },
  {
    p: "at.ac.uibk.plant_health.models.plant",
    c: "SensorData",
    l: "toString()",
  },
  {
    p: "at.ac.uibk.plant_health.models.plant",
    c: "SensorLimits",
    l: "toString()",
  },
  {
    p: "at.ac.uibk.plant_health.models.plant",
    c: "SensorStationPicture",
    l: "toString()",
  },
  {
    p: "at.ac.uibk.plant_health.models.user",
    c: "Authenticable",
    l: "toString()",
  },
  { p: "at.ac.uibk.plant_health.models.user", c: "Person", l: "toString()" },
  { p: "at.ac.uibk.plant_health.models", c: "Log.LogLevel", l: "TRACE" },
  {
    p: "at.ac.uibk.plant_health.controllers",
    c: "AccessPointController",
    l: "transferData(AccessPoint, List<SensorStation>)",
    u: "transferData(at.ac.uibk.plant_health.models.device.AccessPoint,java.util.List)",
  },
  {
    p: "at.ac.uibk.plant_health.util",
    c: "ConversionUtil",
    l: "tryConvertJson(String, Class<T>)",
    u: "tryConvertJson(java.lang.String,java.lang.Class)",
  },
  {
    p: "at.ac.uibk.plant_health.util",
    c: "ConversionUtil",
    l: "tryConvertJwtToken(String)",
    u: "tryConvertJwtToken(java.lang.String)",
  },
  {
    p: "at.ac.uibk.plant_health.util",
    c: "ConversionUtil",
    l: "tryConvertJwtTokenOptional(String)",
    u: "tryConvertJwtTokenOptional(java.lang.String)",
  },
  {
    p: "at.ac.uibk.plant_health.util",
    c: "ConversionUtil",
    l: "tryConvertUUID(String)",
    u: "tryConvertUUID(java.lang.String)",
  },
  {
    p: "at.ac.uibk.plant_health.util",
    c: "ConversionUtil",
    l: "tryConvertUUIDOptional(String)",
    u: "tryConvertUUIDOptional(java.lang.String)",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "PersonService",
    l: "update(Person, String, String, String, Set<Permission>)",
    u: "update(at.ac.uibk.plant_health.models.user.Person,java.lang.String,java.lang.String,java.lang.String,java.util.Set)",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "PersonService",
    l: "update(UUID, String, String, Set<Permission>, String)",
    u: "update(java.util.UUID,java.lang.String,java.lang.String,java.util.Set,java.lang.String)",
  },
  {
    p: "at.ac.uibk.plant_health.controllers",
    c: "AccessPointController",
    l: "updateAccessPoint(UUID, String, int)",
    u: "updateAccessPoint(java.util.UUID,java.lang.String,int)",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "AccessPointService",
    l: "updateAccessPointInfo(UUID, String, int)",
    u: "updateAccessPointInfo(java.util.UUID,java.lang.String,int)",
  },
  {
    p: "at.ac.uibk.plant_health.repositories",
    c: "AccessPointRepository",
    l: "updateIsConnectedByLastConnection()",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "AccessPointService",
    l: "updateLastConnection()",
  },
  {
    p: "at.ac.uibk.plant_health.service.person_service",
    c: "TestPersonServiceGeneral",
    l: "updatePerson()",
  },
  {
    p: "at.ac.uibk.plant_health.service.person_service",
    c: "TestPersonServiceGeneral",
    l: "updatePersonViaCreate()",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "SensorStationService",
    l: "updateSensorStation(SensorStation, String, Integer)",
    u: "updateSensorStation(at.ac.uibk.plant_health.models.device.SensorStation,java.lang.String,java.lang.Integer)",
  },
  {
    p: "at.ac.uibk.plant_health.controllers",
    c: "PersonController",
    l: "updateSettings(Person, String, String, String)",
    u: "updateSettings(at.ac.uibk.plant_health.models.user.Person,java.lang.String,java.lang.String,java.lang.String)",
  },
  {
    p: "at.ac.uibk.plant_health.repositories",
    c: "PersonRepository",
    l: "updateToken(S)",
  },
  {
    p: "at.ac.uibk.plant_health.repositories",
    c: "PersonRepository",
    l: "updateToken(UUID, UUID, LocalDateTime)",
    u: "updateToken(java.util.UUID,java.util.UUID,java.time.LocalDateTime)",
  },
  {
    p: "at.ac.uibk.plant_health.controllers",
    c: "PersonController",
    l: "updateUser(UUID, String, String, Set<Permission>, String)",
    u: "updateUser(java.util.UUID,java.lang.String,java.lang.String,java.util.Set,java.lang.String)",
  },
  {
    p: "at.ac.uibk.plant_health.repositories",
    c: "PersonRepository",
    l: "updateUserDetails(UUID, String, Set<GrantedAuthority>)",
    u: "updateUserDetails(java.util.UUID,java.lang.String,java.util.Set)",
  },
  {
    p: "at.ac.uibk.plant_health.service",
    c: "SensorStationService",
    l: "uploadPicture(MultipartFile, UUID)",
    u: "uploadPicture(org.springframework.web.multipart.MultipartFile,java.util.UUID)",
  },
  {
    p: "at.ac.uibk.plant_health.controllers",
    c: "SensorStationController",
    l: "uploadPicture(UUID, MultipartFile)",
    u: "uploadPicture(java.util.UUID,org.springframework.web.multipart.MultipartFile)",
  },
  { p: "at.ac.uibk.plant_health.models.user", c: "Permission", l: "USER" },
  {
    p: "at.ac.uibk.plant_health.config.jwt_authentication.authentication_types",
    c: "UserAuthentication",
    l: "UserAuthentication(UUID, String)",
    u: "%3Cinit%3E(java.util.UUID,java.lang.String)",
  },
  {
    p: "at.ac.uibk.plant_health.models.rest_responses",
    c: "UserDashBoardResponse",
    l: "UserDashBoardResponse(Person)",
    u: "%3Cinit%3E(at.ac.uibk.plant_health.models.user.Person)",
  },
  { p: "at.ac.uibk.plant_health.util", c: "StringGenerator", l: "username()" },
  {
    p: "at.ac.uibk.plant_health.models.annotations",
    c: "AllPermission",
    l: "value()",
  },
  {
    p: "at.ac.uibk.plant_health.models.annotations",
    c: "AnyPermission",
    l: "value()",
  },
  {
    p: "at.ac.uibk.plant_health.models.annotations",
    c: "PrincipalRequired",
    l: "value()",
  },
  {
    p: "at.ac.uibk.plant_health.config",
    c: "StartupConfig.Profile",
    l: "valueOf(String)",
    u: "valueOf(java.lang.String)",
  },
  {
    p: "at.ac.uibk.plant_health.models.device",
    c: "DeviceType",
    l: "valueOf(String)",
    u: "valueOf(java.lang.String)",
  },
  {
    p: "at.ac.uibk.plant_health.models",
    c: "Log.LogLevel",
    l: "valueOf(String)",
    u: "valueOf(java.lang.String)",
  },
  {
    p: "at.ac.uibk.plant_health.models.user",
    c: "Permission",
    l: "valueOf(String)",
    u: "valueOf(java.lang.String)",
  },
  {
    p: "at.ac.uibk.plant_health.config",
    c: "StartupConfig.Profile",
    l: "values()",
  },
  {
    p: "at.ac.uibk.plant_health.models.device",
    c: "DeviceType",
    l: "values()",
  },
  { p: "at.ac.uibk.plant_health.models", c: "Log.LogLevel", l: "values()" },
  { p: "at.ac.uibk.plant_health.models.user", c: "Permission", l: "values()" },
  { p: "at.ac.uibk.plant_health.models", c: "Log.LogLevel", l: "WARN" },
];
updateSearchResults();
